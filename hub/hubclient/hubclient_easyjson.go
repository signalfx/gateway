// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package hubclient

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson8783fb96DecodeGithubComSignalfxGatewayHubHubclient(in *jlexer.Lexer, out *Server) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				out.Payload = in.Bytes()
			}
		case "lastHeartbeat":
			out.LastHeartbeat = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8783fb96EncodeGithubComSignalfxGatewayHubHubclient(out *jwriter.Writer, in Server) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"payload\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Payload)
	}
	{
		const prefix string = ",\"lastHeartbeat\":"
		out.RawString(prefix)
		out.Int(int(in.LastHeartbeat))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Server) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8783fb96EncodeGithubComSignalfxGatewayHubHubclient(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Server) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8783fb96EncodeGithubComSignalfxGatewayHubHubclient(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Server) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8783fb96DecodeGithubComSignalfxGatewayHubHubclient(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Server) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8783fb96DecodeGithubComSignalfxGatewayHubHubclient(l, v)
}
func easyjson8783fb96DecodeGithubComSignalfxGatewayHubHubclient1(in *jlexer.Lexer, out *RegistrationResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lease":
			out.Lease = string(in.String())
		case "config":
			if in.IsNull() {
				in.Skip()
				out.Config = nil
			} else {
				if out.Config == nil {
					out.Config = new(Config)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Config).UnmarshalJSON(data))
				}
			}
		case "cluster":
			if in.IsNull() {
				in.Skip()
				out.Cluster = nil
			} else {
				if out.Cluster == nil {
					out.Cluster = new(Cluster)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Cluster).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8783fb96EncodeGithubComSignalfxGatewayHubHubclient1(out *jwriter.Writer, in RegistrationResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"lease\":"
		out.RawString(prefix[1:])
		out.String(string(in.Lease))
	}
	if in.Config != nil {
		const prefix string = ",\"config\":"
		out.RawString(prefix)
		out.Raw((*in.Config).MarshalJSON())
	}
	if in.Cluster != nil {
		const prefix string = ",\"cluster\":"
		out.RawString(prefix)
		out.Raw((*in.Cluster).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RegistrationResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8783fb96EncodeGithubComSignalfxGatewayHubHubclient1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RegistrationResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8783fb96EncodeGithubComSignalfxGatewayHubHubclient1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RegistrationResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8783fb96DecodeGithubComSignalfxGatewayHubHubclient1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RegistrationResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8783fb96DecodeGithubComSignalfxGatewayHubHubclient1(l, v)
}
func easyjson8783fb96DecodeGithubComSignalfxGatewayHubHubclient2(in *jlexer.Lexer, out *Registration) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cluster":
			out.Cluster = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				out.Payload = in.Bytes()
			}
		case "distributor":
			out.Distributor = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8783fb96EncodeGithubComSignalfxGatewayHubHubclient2(out *jwriter.Writer, in Registration) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cluster\":"
		out.RawString(prefix[1:])
		out.String(string(in.Cluster))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"payload\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Payload)
	}
	{
		const prefix string = ",\"distributor\":"
		out.RawString(prefix)
		out.Bool(bool(in.Distributor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Registration) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8783fb96EncodeGithubComSignalfxGatewayHubHubclient2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Registration) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8783fb96EncodeGithubComSignalfxGatewayHubHubclient2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Registration) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8783fb96DecodeGithubComSignalfxGatewayHubHubclient2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Registration) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8783fb96DecodeGithubComSignalfxGatewayHubHubclient2(l, v)
}
func easyjson8783fb96DecodeGithubComSignalfxGatewayHubHubclient3(in *jlexer.Lexer, out *Config) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "budget":
			if in.IsNull() {
				in.Skip()
				out.Budget = nil
			} else {
				if out.Budget == nil {
					out.Budget = new(Budget)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Budget).UnmarshalJSON(data))
				}
			}
		case "hb":
			out.Heartbeat = int64(in.Int64())
		case "ss":
			out.SpanSize = float64(in.Float64())
		case "ts":
			out.TraceSize = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8783fb96EncodeGithubComSignalfxGatewayHubHubclient3(out *jwriter.Writer, in Config) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Budget != nil {
		const prefix string = ",\"budget\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((*in.Budget).MarshalJSON())
	}
	{
		const prefix string = ",\"hb\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Heartbeat))
	}
	{
		const prefix string = ",\"ss\":"
		out.RawString(prefix)
		out.Float64(float64(in.SpanSize))
	}
	{
		const prefix string = ",\"ts\":"
		out.RawString(prefix)
		out.Float64(float64(in.TraceSize))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Config) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8783fb96EncodeGithubComSignalfxGatewayHubHubclient3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Config) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8783fb96EncodeGithubComSignalfxGatewayHubHubclient3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Config) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8783fb96DecodeGithubComSignalfxGatewayHubHubclient3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Config) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8783fb96DecodeGithubComSignalfxGatewayHubHubclient3(l, v)
}
func easyjson8783fb96DecodeGithubComSignalfxGatewayHubHubclient4(in *jlexer.Lexer, out *Cluster) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "servers":
			if in.IsNull() {
				in.Skip()
				out.Servers = nil
			} else {
				in.Delim('[')
				if out.Servers == nil {
					if !in.IsDelim(']') {
						out.Servers = make([]*Server, 0, 8)
					} else {
						out.Servers = []*Server{}
					}
				} else {
					out.Servers = (out.Servers)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *Server
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(Server)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v7).UnmarshalJSON(data))
						}
					}
					out.Servers = append(out.Servers, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "distributors":
			if in.IsNull() {
				in.Skip()
				out.Distributors = nil
			} else {
				in.Delim('[')
				if out.Distributors == nil {
					if !in.IsDelim(']') {
						out.Distributors = make([]*Server, 0, 8)
					} else {
						out.Distributors = []*Server{}
					}
				} else {
					out.Distributors = (out.Distributors)[:0]
				}
				for !in.IsDelim(']') {
					var v8 *Server
					if in.IsNull() {
						in.Skip()
						v8 = nil
					} else {
						if v8 == nil {
							v8 = new(Server)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v8).UnmarshalJSON(data))
						}
					}
					out.Distributors = append(out.Distributors, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8783fb96EncodeGithubComSignalfxGatewayHubHubclient4(out *jwriter.Writer, in Cluster) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"servers\":"
		out.RawString(prefix)
		if in.Servers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Servers {
				if v9 > 0 {
					out.RawByte(',')
				}
				if v10 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v10).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"distributors\":"
		out.RawString(prefix)
		if in.Distributors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Distributors {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v12).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Cluster) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8783fb96EncodeGithubComSignalfxGatewayHubHubclient4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Cluster) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8783fb96EncodeGithubComSignalfxGatewayHubHubclient4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Cluster) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8783fb96DecodeGithubComSignalfxGatewayHubHubclient4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Cluster) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8783fb96DecodeGithubComSignalfxGatewayHubHubclient4(l, v)
}
func easyjson8783fb96DecodeGithubComSignalfxGatewayHubHubclient5(in *jlexer.Lexer, out *Budget) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "eb":
			out.ErrorBudget = float64(in.Float64())
		case "sb":
			out.SpanBudget = float64(in.Float64())
		case "tb":
			out.TraceBudget = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8783fb96EncodeGithubComSignalfxGatewayHubHubclient5(out *jwriter.Writer, in Budget) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"eb\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.ErrorBudget))
	}
	{
		const prefix string = ",\"sb\":"
		out.RawString(prefix)
		out.Float64(float64(in.SpanBudget))
	}
	{
		const prefix string = ",\"tb\":"
		out.RawString(prefix)
		out.Float64(float64(in.TraceBudget))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Budget) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8783fb96EncodeGithubComSignalfxGatewayHubHubclient5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Budget) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8783fb96EncodeGithubComSignalfxGatewayHubHubclient5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Budget) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8783fb96DecodeGithubComSignalfxGatewayHubHubclient5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Budget) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8783fb96DecodeGithubComSignalfxGatewayHubHubclient5(l, v)
}
