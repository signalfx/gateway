// Code generated by protoc-gen-go. DO NOT EDIT.
// source: signal_fx_protocol_buffers.proto

/*
Package com_signalfx_metrics_protobuf is a generated protocol buffer package.

It is generated from these files:
	signal_fx_protocol_buffers.proto

It has these top-level messages:
	Datum
	Dimension
	DataPoint
	DataPointUploadMessage
	PointValue
	Property
	PropertyValue
	Event
	EventUploadMessage
*/
package com_signalfx_metrics_protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MetricType int32

const (
	// *
	// Numerical: Periodic, instantaneous measurement of some state.
	MetricType_GAUGE MetricType = 0
	// *
	// Numerical: Count of occurrences. Generally non-negative integers.
	MetricType_COUNTER MetricType = 1
	// *
	// String: Used for non-continuous quantities (that is, measurements where there is a fixed
	// set of meaningful values). This is essentially a special case of gauge.
	MetricType_ENUM MetricType = 2
	// *
	// Tracks a value that increases over time, where only the difference is important.
	MetricType_CUMULATIVE_COUNTER MetricType = 3
)

var MetricType_name = map[int32]string{
	0: "GAUGE",
	1: "COUNTER",
	2: "ENUM",
	3: "CUMULATIVE_COUNTER",
}
var MetricType_value = map[string]int32{
	"GAUGE":              0,
	"COUNTER":            1,
	"ENUM":               2,
	"CUMULATIVE_COUNTER": 3,
}

func (x MetricType) Enum() *MetricType {
	p := new(MetricType)
	*p = x
	return p
}
func (x MetricType) String() string {
	return proto.EnumName(MetricType_name, int32(x))
}
func (x *MetricType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MetricType_value, data, "MetricType")
	if err != nil {
		return err
	}
	*x = MetricType(value)
	return nil
}
func (MetricType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// *
// Different categories of events supported
type EventCategory int32

const (
	// *
	// Created by user via UI or API, e.g. a deployment event
	EventCategory_USER_DEFINED EventCategory = 1000000
	// *
	// Output by anomaly detectors
	EventCategory_ALERT EventCategory = 100000
	// *
	// Audit trail events
	EventCategory_AUDIT EventCategory = 200000
	// *
	// Generated by analytics server
	EventCategory_JOB EventCategory = 300000
	// *
	// @deprecated
	// Event originated within collectd (deprecated in favor of AGENT)
	EventCategory_COLLECTD EventCategory = 400000
	// *
	// Service discovery event
	EventCategory_SERVICE_DISCOVERY EventCategory = 500000
	// *
	// Created by exception appenders to denote exceptional events
	EventCategory_EXCEPTION EventCategory = 700000
	// *
	// Event originated from an agent
	EventCategory_AGENT EventCategory = 2000000
)

var EventCategory_name = map[int32]string{
	1000000: "USER_DEFINED",
	100000:  "ALERT",
	200000:  "AUDIT",
	300000:  "JOB",
	400000:  "COLLECTD",
	500000:  "SERVICE_DISCOVERY",
	700000:  "EXCEPTION",
	2000000: "AGENT",
}
var EventCategory_value = map[string]int32{
	"USER_DEFINED":      1000000,
	"ALERT":             100000,
	"AUDIT":             200000,
	"JOB":               300000,
	"COLLECTD":          400000,
	"SERVICE_DISCOVERY": 500000,
	"EXCEPTION":         700000,
	"AGENT":             2000000,
}

func (x EventCategory) Enum() *EventCategory {
	p := new(EventCategory)
	*p = x
	return p
}
func (x EventCategory) String() string {
	return proto.EnumName(EventCategory_name, int32(x))
}
func (x *EventCategory) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EventCategory_value, data, "EventCategory")
	if err != nil {
		return err
	}
	*x = EventCategory(value)
	return nil
}
func (EventCategory) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Datum struct {
	StrValue         *string  `protobuf:"bytes,1,opt,name=strValue" json:"strValue,omitempty"`
	DoubleValue      *float64 `protobuf:"fixed64,2,opt,name=doubleValue" json:"doubleValue,omitempty"`
	IntValue         *int64   `protobuf:"varint,3,opt,name=intValue" json:"intValue,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Datum) Reset()                    { *m = Datum{} }
func (m *Datum) String() string            { return proto.CompactTextString(m) }
func (*Datum) ProtoMessage()               {}
func (*Datum) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Datum) GetStrValue() string {
	if m != nil && m.StrValue != nil {
		return *m.StrValue
	}
	return ""
}

func (m *Datum) GetDoubleValue() float64 {
	if m != nil && m.DoubleValue != nil {
		return *m.DoubleValue
	}
	return 0
}

func (m *Datum) GetIntValue() int64 {
	if m != nil && m.IntValue != nil {
		return *m.IntValue
	}
	return 0
}

type Dimension struct {
	Key              *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Dimension) Reset()                    { *m = Dimension{} }
func (m *Dimension) String() string            { return proto.CompactTextString(m) }
func (*Dimension) ProtoMessage()               {}
func (*Dimension) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Dimension) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *Dimension) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type DataPoint struct {
	Source           *string      `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Metric           *string      `protobuf:"bytes,2,opt,name=metric" json:"metric,omitempty"`
	Timestamp        *int64       `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Value            *Datum       `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
	MetricType       *MetricType  `protobuf:"varint,5,opt,name=metricType,enum=com.signalfx.metrics.protobuf.MetricType" json:"metricType,omitempty"`
	Dimensions       []*Dimension `protobuf:"bytes,6,rep,name=dimensions" json:"dimensions,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *DataPoint) Reset()                    { *m = DataPoint{} }
func (m *DataPoint) String() string            { return proto.CompactTextString(m) }
func (*DataPoint) ProtoMessage()               {}
func (*DataPoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DataPoint) GetSource() string {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return ""
}

func (m *DataPoint) GetMetric() string {
	if m != nil && m.Metric != nil {
		return *m.Metric
	}
	return ""
}

func (m *DataPoint) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *DataPoint) GetValue() *Datum {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *DataPoint) GetMetricType() MetricType {
	if m != nil && m.MetricType != nil {
		return *m.MetricType
	}
	return MetricType_GAUGE
}

func (m *DataPoint) GetDimensions() []*Dimension {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

type DataPointUploadMessage struct {
	Datapoints       []*DataPoint `protobuf:"bytes,1,rep,name=datapoints" json:"datapoints,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *DataPointUploadMessage) Reset()                    { *m = DataPointUploadMessage{} }
func (m *DataPointUploadMessage) String() string            { return proto.CompactTextString(m) }
func (*DataPointUploadMessage) ProtoMessage()               {}
func (*DataPointUploadMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DataPointUploadMessage) GetDatapoints() []*DataPoint {
	if m != nil {
		return m.Datapoints
	}
	return nil
}

type PointValue struct {
	Timestamp        *int64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Value            *Datum `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PointValue) Reset()                    { *m = PointValue{} }
func (m *PointValue) String() string            { return proto.CompactTextString(m) }
func (*PointValue) ProtoMessage()               {}
func (*PointValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PointValue) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *PointValue) GetValue() *Datum {
	if m != nil {
		return m.Value
	}
	return nil
}

type Property struct {
	Key              *string        `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value            *PropertyValue `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *Property) Reset()                    { *m = Property{} }
func (m *Property) String() string            { return proto.CompactTextString(m) }
func (*Property) ProtoMessage()               {}
func (*Property) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Property) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *Property) GetValue() *PropertyValue {
	if m != nil {
		return m.Value
	}
	return nil
}

type PropertyValue struct {
	StrValue         *string  `protobuf:"bytes,1,opt,name=strValue" json:"strValue,omitempty"`
	DoubleValue      *float64 `protobuf:"fixed64,2,opt,name=doubleValue" json:"doubleValue,omitempty"`
	IntValue         *int64   `protobuf:"varint,3,opt,name=intValue" json:"intValue,omitempty"`
	BoolValue        *bool    `protobuf:"varint,4,opt,name=boolValue" json:"boolValue,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *PropertyValue) Reset()                    { *m = PropertyValue{} }
func (m *PropertyValue) String() string            { return proto.CompactTextString(m) }
func (*PropertyValue) ProtoMessage()               {}
func (*PropertyValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PropertyValue) GetStrValue() string {
	if m != nil && m.StrValue != nil {
		return *m.StrValue
	}
	return ""
}

func (m *PropertyValue) GetDoubleValue() float64 {
	if m != nil && m.DoubleValue != nil {
		return *m.DoubleValue
	}
	return 0
}

func (m *PropertyValue) GetIntValue() int64 {
	if m != nil && m.IntValue != nil {
		return *m.IntValue
	}
	return 0
}

func (m *PropertyValue) GetBoolValue() bool {
	if m != nil && m.BoolValue != nil {
		return *m.BoolValue
	}
	return false
}

type Event struct {
	EventType        *string        `protobuf:"bytes,1,req,name=eventType" json:"eventType,omitempty"`
	Dimensions       []*Dimension   `protobuf:"bytes,2,rep,name=dimensions" json:"dimensions,omitempty"`
	Properties       []*Property    `protobuf:"bytes,3,rep,name=properties" json:"properties,omitempty"`
	Category         *EventCategory `protobuf:"varint,4,opt,name=category,enum=com.signalfx.metrics.protobuf.EventCategory" json:"category,omitempty"`
	Timestamp        *int64         `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Event) GetEventType() string {
	if m != nil && m.EventType != nil {
		return *m.EventType
	}
	return ""
}

func (m *Event) GetDimensions() []*Dimension {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func (m *Event) GetProperties() []*Property {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *Event) GetCategory() EventCategory {
	if m != nil && m.Category != nil {
		return *m.Category
	}
	return EventCategory_USER_DEFINED
}

func (m *Event) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type EventUploadMessage struct {
	Events           []*Event `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *EventUploadMessage) Reset()                    { *m = EventUploadMessage{} }
func (m *EventUploadMessage) String() string            { return proto.CompactTextString(m) }
func (*EventUploadMessage) ProtoMessage()               {}
func (*EventUploadMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *EventUploadMessage) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func init() {
	proto.RegisterType((*Datum)(nil), "com.signalfx.metrics.protobuf.Datum")
	proto.RegisterType((*Dimension)(nil), "com.signalfx.metrics.protobuf.Dimension")
	proto.RegisterType((*DataPoint)(nil), "com.signalfx.metrics.protobuf.DataPoint")
	proto.RegisterType((*DataPointUploadMessage)(nil), "com.signalfx.metrics.protobuf.DataPointUploadMessage")
	proto.RegisterType((*PointValue)(nil), "com.signalfx.metrics.protobuf.PointValue")
	proto.RegisterType((*Property)(nil), "com.signalfx.metrics.protobuf.Property")
	proto.RegisterType((*PropertyValue)(nil), "com.signalfx.metrics.protobuf.PropertyValue")
	proto.RegisterType((*Event)(nil), "com.signalfx.metrics.protobuf.Event")
	proto.RegisterType((*EventUploadMessage)(nil), "com.signalfx.metrics.protobuf.EventUploadMessage")
	proto.RegisterEnum("com.signalfx.metrics.protobuf.MetricType", MetricType_name, MetricType_value)
	proto.RegisterEnum("com.signalfx.metrics.protobuf.EventCategory", EventCategory_name, EventCategory_value)
}

func init() { proto.RegisterFile("signal_fx_protocol_buffers.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 610 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0x3f, 0x6f, 0xd3, 0x5e,
	0x14, 0xfd, 0xbd, 0xb8, 0xce, 0x2f, 0xbe, 0x6e, 0xc3, 0xeb, 0x43, 0x2a, 0x59, 0x40, 0x96, 0x55,
	0xa9, 0xa6, 0x42, 0x19, 0x02, 0x5b, 0x29, 0xa2, 0xd8, 0xaf, 0x55, 0xaa, 0xfc, 0xa9, 0x52, 0x3b,
	0x02, 0x31, 0x44, 0x4e, 0xfa, 0x52, 0x59, 0x24, 0x7e, 0x96, 0xfd, 0x5c, 0x35, 0x4c, 0x1d, 0x58,
	0x18, 0x10, 0x3b, 0x53, 0x37, 0x3e, 0x01, 0x7b, 0xc5, 0xe7, 0x60, 0xe8, 0xc8, 0xc8, 0x47, 0x40,
	0x79, 0xae, 0xa3, 0x86, 0x81, 0x04, 0xc4, 0xf6, 0x7c, 0xef, 0x3d, 0xe7, 0xde, 0x73, 0xcf, 0x35,
	0x18, 0x49, 0x70, 0x1a, 0xfa, 0xa3, 0xde, 0xf0, 0xbc, 0x17, 0xc5, 0x5c, 0xf0, 0x01, 0x1f, 0xf5,
	0xfa, 0xe9, 0x70, 0xc8, 0xe2, 0xa4, 0x2a, 0x03, 0xe4, 0xfe, 0x80, 0x8f, 0xab, 0x59, 0xd5, 0xf0,
	0xbc, 0x3a, 0x66, 0x22, 0x0e, 0x06, 0x37, 0xb9, 0x7e, 0x3a, 0x34, 0x9f, 0x83, 0xea, 0xf8, 0x22,
	0x1d, 0x13, 0x0c, 0xa5, 0x44, 0xc4, 0x5d, 0x7f, 0x94, 0xb2, 0x0a, 0x32, 0x90, 0xa5, 0x91, 0xbb,
	0xa0, 0x9f, 0xf0, 0xb4, 0x3f, 0x62, 0x59, 0xb0, 0x60, 0x20, 0x0b, 0x4d, 0xcb, 0x82, 0x50, 0x64,
	0x11, 0xc5, 0x40, 0x96, 0x62, 0x6e, 0x81, 0xe6, 0x04, 0x63, 0x16, 0x26, 0x01, 0x0f, 0x89, 0x0e,
	0xca, 0x1b, 0x36, 0xb9, 0x21, 0x58, 0x03, 0xf5, 0x6c, 0x06, 0xd5, 0xcc, 0x1f, 0x08, 0x34, 0xc7,
	0x17, 0xfe, 0x11, 0x0f, 0x42, 0x41, 0xca, 0x50, 0x4c, 0x78, 0x1a, 0x0f, 0xf2, 0x6e, 0x65, 0x28,
	0x66, 0xc3, 0x65, 0xd5, 0x64, 0x1d, 0x34, 0x11, 0x8c, 0x59, 0x22, 0xfc, 0x71, 0x94, 0x75, 0x22,
	0x8f, 0x73, 0xbe, 0x15, 0x03, 0x59, 0x7a, 0x6d, 0xb3, 0xfa, 0x5b, 0x69, 0xd5, 0x4c, 0xd7, 0x2e,
	0x40, 0x96, 0x71, 0x27, 0x11, 0xab, 0xa8, 0x06, 0xb2, 0xca, 0xb5, 0x87, 0x0b, 0x90, 0xcd, 0x19,
	0x80, 0x3c, 0x05, 0x38, 0xc9, 0xd5, 0x25, 0x95, 0xa2, 0xa1, 0x58, 0x7a, 0xcd, 0x5a, 0xd4, 0x38,
	0x07, 0x98, 0x5d, 0xd8, 0x98, 0x29, 0xf6, 0xa2, 0x11, 0xf7, 0x4f, 0x9a, 0x2c, 0x49, 0xfc, 0xd3,
	0x8c, 0xd7, 0x17, 0x7e, 0x34, 0xcd, 0x24, 0x15, 0xb4, 0x1c, 0x6f, 0x4e, 0x65, 0xba, 0x00, 0xf2,
	0x21, 0x7d, 0xf8, 0x57, 0xab, 0x32, 0x5d, 0x28, 0x1d, 0xc5, 0x3c, 0x62, 0xb1, 0x98, 0xcc, 0x1b,
	0xb9, 0x73, 0xdb, 0x48, 0xbd, 0xf6, 0x68, 0x01, 0x5b, 0x4e, 0x22, 0xa7, 0x33, 0x5f, 0xc3, 0xda,
	0x5c, 0xe0, 0xaf, 0x2f, 0x6d, 0xaa, 0xb3, 0xcf, 0xf9, 0xa8, 0x3b, 0x13, 0x56, 0x32, 0xbf, 0x23,
	0x50, 0xe9, 0x19, 0x0b, 0xc5, 0x34, 0xc9, 0xa6, 0x0f, 0x69, 0x33, 0x32, 0x0a, 0x96, 0xf6, 0x8b,
	0x77, 0x85, 0x3f, 0xf3, 0x8e, 0xec, 0x00, 0x44, 0xd9, 0xdc, 0x01, 0x4b, 0x2a, 0x8a, 0x44, 0x6f,
	0x2d, 0xa9, 0x9c, 0x3c, 0x83, 0xd2, 0xc0, 0x17, 0xec, 0x94, 0xc7, 0x13, 0x39, 0x69, 0x79, 0xe1,
	0xd2, 0xa4, 0x0a, 0xfb, 0x06, 0x33, 0x6f, 0xa9, 0x2a, 0xff, 0xb3, 0x43, 0x20, 0xb2, 0x66, 0xfe,
	0x8e, 0x9e, 0x40, 0x51, 0xca, 0xce, 0x6f, 0x68, 0x73, 0x99, 0x36, 0xdb, 0xfb, 0x00, 0xb7, 0x6e,
	0x5c, 0x03, 0xf5, 0x60, 0xcf, 0x3b, 0xa0, 0xf8, 0x3f, 0xa2, 0xc3, 0xff, 0x76, 0xdb, 0x6b, 0xb9,
	0xb4, 0x83, 0x11, 0x29, 0xc1, 0x0a, 0x6d, 0x79, 0x4d, 0x5c, 0x20, 0x1b, 0x40, 0x6c, 0xaf, 0xe9,
	0x35, 0xf6, 0xdc, 0x7a, 0x97, 0xf6, 0xf2, 0x0a, 0x65, 0xfb, 0x23, 0x82, 0xb5, 0xf9, 0xc1, 0x09,
	0xac, 0x7a, 0xc7, 0xb4, 0xd3, 0x73, 0xe8, 0x7e, 0xbd, 0x45, 0x1d, 0x7c, 0xf5, 0x6e, 0x97, 0xe8,
	0xa0, 0xee, 0x35, 0x68, 0xc7, 0xc5, 0x97, 0x1f, 0x8a, 0xf2, 0xc3, 0x73, 0xea, 0x2e, 0xbe, 0xfa,
	0xb4, 0x4a, 0x34, 0x50, 0x0e, 0xdb, 0x2f, 0xf0, 0xf5, 0x67, 0x42, 0xca, 0x50, 0xb2, 0xdb, 0x8d,
	0x06, 0xb5, 0x5d, 0x07, 0x5f, 0x7c, 0xa9, 0x90, 0x7b, 0xb0, 0x7e, 0x4c, 0x3b, 0xdd, 0xba, 0x4d,
	0x7b, 0x4e, 0xfd, 0xd8, 0x6e, 0x77, 0x69, 0xe7, 0x15, 0xbe, 0xfc, 0xfa, 0x80, 0xdc, 0x01, 0x8d,
	0xbe, 0xb4, 0xe9, 0x91, 0x5b, 0x6f, 0xb7, 0xf0, 0xf5, 0xb7, 0x6d, 0xc9, 0x78, 0x40, 0x5b, 0x2e,
	0xbe, 0x78, 0xff, 0xf6, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x20, 0x1a, 0x1e, 0xe7, 0x11, 0x05,
	0x00, 0x00,
}
