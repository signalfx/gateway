diff --git a/tdigest.go b/tdigest.go
index 9cebb21..dfc4166 100644
--- a/tdigest.go
+++ b/tdigest.go
@@ -3,7 +3,6 @@ package tdigest
 import (
 	"math"
 	"sort"
-	"fmt"
 )
 
 type TDigest struct {
@@ -117,19 +116,9 @@ func (t *TDigest) AddCentroid(c Centroid) {
 	b := cap(t.processed)
 	called := false
 	if t.processed.Len() >= t.maxProcessed || t.unprocessed.Len() > (t.maxUnprocessed-t.processed.Len()) {
-		fmt.Println("about to process", len(t.processed), len(t.unprocessed))
 		t.process()
 		called = true
 	}
-	if cap(t.processed) > b {
-		fmt.Println( len(t.Centroids()))
-		fmt.Println( "median", t.Quantile(0.5))
-		fmt.Println( len(t.Centroids()))
-		for _,c := range t.Centroids() {
-			fmt.Println( c.String())
-		}
-		panic(fmt.Sprintf("here %d %d %t", cap(t.processed), b, called))
-	}
 }
 
 func (t *TDigest) process() {
@@ -156,7 +145,6 @@ func (t *TDigest) processIt(updateCumulative bool) {
 		soFar := t.unprocessed[0].Weight
 		k1 := t.Scaler.k(0, normalizer)
 		limit := t.processedWeight * t.Scaler.q(k1+1, normalizer)
-		fmt.Printf( "normalizer %f, k1 %f, limit %f, sofar %f\n", normalizer, k1, limit, soFar)
 		for _, centroid := range t.unprocessed[1:] {
 			projected := soFar + centroid.Weight
 			if projected <= limit {
@@ -166,7 +154,6 @@ func (t *TDigest) processIt(updateCumulative bool) {
 				k1 = t.Scaler.k(soFar/t.processedWeight, normalizer)
 				limit = t.processedWeight * t.Scaler.q(k1+1.0, normalizer)
 				soFar += centroid.Weight
-				//fmt.Printf( "normalizer %f, k1 %f, limit %f, sofar %f %s\n", normalizer, k1, limit, soFar, centroid.String())
 				t.processed = append(t.processed, centroid)
 			}
 		}
